  generator client {
    provider = "prisma-client-js"
  }

  datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
  }

  model Users {
    id            Int           @id @default(autoincrement())
    email         String        @unique
    username      String?       @unique
    password      String
    isAdmin       Boolean       @default(false)
    description   String?       @default("No About Me")
    suspended     Boolean       @default(false)
    lastActivity  DateTime?
    lastLoginIp   String?
    failedLogins  Int          @default(0)
    createdAt     DateTime      @default(now())
    updatedAt     DateTime      @updatedAt
    permissions   Permission[]
    servers       Server[]
    securityLogs  SecurityLog[]
    sessions      Session[]
  }

  model Session {
    id         String   @id @default(cuid())
    session_id String   @unique
    data       String
    expires    DateTime
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    userId     Int?
    user       Users?   @relation(fields: [userId], references: [id])
    ipAddress  String?
    userAgent  String?
    isValid    Boolean  @default(true)
  }

  model Server {
    id           Int      @id @default(autoincrement())
    UUID         String   @unique @default(uuid())
    name         String
    description  String?
    createdAt    DateTime @default(now())
    Ports        String
    Memory       Int
    Cpu          Int
    Storage      Int
    Variables    String?
    StartCommand String?
    dockerImage  String?
    Installing   Boolean  @default(true)
    Suspended    Boolean  @default(false)
    ownerId      Int
    nodeId       Int
    imageId      Int
    node         Node     @relation(fields: [nodeId], references: [id])
    owner        Users    @relation(fields: [ownerId], references: [id])
    image        Images   @relation(fields: [imageId], references: [id])
  }

  model Images {
    id           Int      @id @default(autoincrement())
    UUID         String   @unique @default(uuid())
    name         String?
    description  String?
    author       String?
    authorName   String?
    createdAt    DateTime @default(now())
    meta         String?
    dockerImages String?
    startup      String?
    info         String?
    scripts      String?
    variables    String?
    servers      Server[]
  }

  model Node {
    id        Int      @id @default(autoincrement())
    name      String
    ram       Int      @default(0)
    cpu       Int      @default(0)
    disk      Int      @default(0)
    address   String   @default("127.0.0.1")
    port      Int      @default(3001)
    key       String
    createdAt DateTime @default(now())
    servers   Server[]
  }

  model settings {
    id          Int      @id @default(autoincrement())
    title       String   @default("Airlink")
    description String   @default("AirLink is a free and open source project by AirlinkLabs")
    logo        String   @default("../assets/logo.png")
    theme       String   @default("default")
    language    String   @default("en")
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
  }

  model SecurityLog {
    id          Int      @id @default(autoincrement())
    eventType   String
    ipAddress   String
    path        String
    userId      Int?
    details     String?
    severity    String   @default("info")
    timestamp   DateTime @default(now())
    user        Users?   @relation(fields: [userId], references: [id])
  }

  model IpBlacklist {
    id          Int       @id @default(autoincrement())
    ip          String    @unique
    reason      String?
    createdAt   DateTime  @default(now())
    expiresAt   DateTime?
  }

  model ApiKeyPermission {
    id          Int      @id @default(autoincrement())
    name        String
    apiKeyId    Int
    apiKey      ApiKey   @relation(fields: [apiKeyId], references: [id])
    createdAt   DateTime @default(now())
  }

  model ApiKey {
    id          Int               @id @default(autoincrement())
    key         String           @unique
    name        String?
    description String?
    createdAt   DateTime         @default(now())
    updatedAt   DateTime         @updatedAt
    expires     DateTime?
    lastUsed    DateTime?
    usageCount  Int              @default(0)
    active      Boolean          @default(true)
    permissions ApiKeyPermission[]
  }

  model Permission {
    id          Int      @id @default(autoincrement())
    name        String   @unique
    description String?
    users       Users[]
  }